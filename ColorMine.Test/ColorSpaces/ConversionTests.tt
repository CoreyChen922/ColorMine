<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import Namespace="System.Xml" #>
<#@ import Namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var document = new XmlDocument();
	var file = Host.ResolvePath("ConversionResults.xml");
	document.Load(file);
	var colors = document.SelectNodes("ConversionResults/*");
#>
<#@ output extension=".cs" #>//Note: This is a generated file.
using ColorMine.ColorSpaces;
using ColorMine.Utility;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ColorMine.Test.ColorSpaces
{
<# foreach (XmlNode fromSpace in colors) { var fromName = fromSpace.Name; foreach (XmlNode toSpace in fromSpace.ChildNodes) { var toName = toSpace.Name; #>
	public class <#= fromSpace.Attributes["Name"].Value #><#= fromName #>To<#= toName #>Test
    {
		private const double Precision = .01;

        [TestClass]
        public class <#= fromName #>To<#= toName #>
        {
			private static void ExpectedValuesForKnownColor(IColorSpace knownColor, I<#= toName #> expectedColor)
            {
                var target = knownColor.To<<#= toName #>>();

                // TODO Shouldn't use ColorMine code to validate ColorMine code...
<# foreach (XmlNode attribute in toSpace.Attributes) { if(attribute.Name != "Name") { #>
				Assert.IsTrue(expectedColor.<#= attribute.Name #>.BasicallyEqualTo(target.<#= attribute.Name #>,Precision));
<# } } #>
            }

            [TestMethod]
            public void ExpectedValuesFor<#= fromSpace.Attributes["Name"].Value #>()
            {
				var knownColor = new <#= fromName #> {<# foreach (XmlNode attribute in fromSpace.Attributes) { if(attribute.Name != "Name") { #> <#= attribute.Name #> = <#= attribute.Value #>,<# } } #> };
				var expectedColor = new <#= toName #> {<# foreach (XmlNode attribute in toSpace.Attributes) { if(attribute.Name != "Name") { #> <#= attribute.Name #> = <#= attribute.Value #>,<# } } #> };

                ExpectedValuesForKnownColor(knownColor,expectedColor);
            }
        }
	}
	<# } #>
<# } #>

}